2025-06-13 10:22:07 [ERROR]: ‚ùå Error generating interfaces: prismaAst.parseSchema is not a function
2025-06-13 10:33:22 [ERROR]: ‚ùå Error generating interfaces: parseSchema is not a function
2025-06-13 10:41:19 [ERROR]: üö® Interface generation failed: parseSchema is not a function
2025-06-13 10:50:20 [ERROR]: üö® Interface generation failed: parser.parse is not a function
2025-06-13 10:50:27 [ERROR]: üö® Interface generation failed: parser.parse is not a function
2025-06-13 10:50:33 [ERROR]: üö® Interface generation failed: parser.parse is not a function
2025-06-13 10:50:39 [ERROR]: üö® Interface generation failed: parser.parse is not a function
2025-06-13 10:58:35 [ERROR]: üö® Interface generation failed: parseSchema is not defined
2025-06-13 10:59:51 [ERROR]: üö® Interface generation failed: Cannot create property 'outputCst' on string '// THIS FILE IS AUTO-GENERATED. DO NOT EDIT DIRECTLY.
// Modify individual schema parts in the prisma/schemas directory.

generator client {
  provider = "prisma-client-js"
  output   = "../auth-kit-core/src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator seed {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

enum ActivityType {
  LOGIN
  LOGOUT
  MFA_ENABLED
  PASSWORD_RESET
}

enum AdminAction {
  USER_BAN
  USER_UNBAN
  ACCOUNT_DELETED
  ORG_CREATED
  ORG_MEMBER_REMOVED
  ORG_INVITE_SENT
  SUBSCRIPTION_UPDATED
}

enum AuthEvent {
  LOGIN
  LOGOUT
  MFA_SUCCESS
  MFA_FAILED
  EMAIL_VERIFIED
  PASSWORD_CHANGED
  TOKEN_EXPIRED
}

enum BillingEventType {
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_UPDATED
  SUBSCRIPTION_CANCELED
  PAYMENT_SUCCEEDED
  PAYMENT_FAILED
  TRIAL_STARTED
  TRIAL_ENDED
  REFUND_INITIATED
  COUPON_APPLIED
  PLAN_SWITCHED
  RENEWAL
  PROVIDER_SYNC
}

enum BillingProvider {
  STRIPE
  PAYSTACK
  LEMONSQUEEZY
}

enum OAuthProvider {
  GITHUB
  GOOGLE
  DISCORD
}

enum SocialOAuthProvider {
	FACEBOOK
	LINKEDIN
}

enum Web3OAuthProvider {
	METAMASK
	BITCOIN
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum Role {
  USER
  PREMIUM
  PRO
  ADMIN
}

enum SubscriptionPlan {
  FREE
  PREMIUM
  PRO
  ENTERPRISE
	EDUCATOR
}

enum SubscriptionProvider {
  STRIPE
  PAYSTACK
  LEMONSQUEEZY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  TRIALING
  EXPIRED
	RENEWED
}

enum TokenType {
  VERIFY_EMAIL
  RESET_PASSWORD
  MAGIC_LINK
  TOTP
}

enum UserStatus {
  active
  suspended
  banned
}

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    ActivityType
  ip        String?
  metadata  Json?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model AdminAuditLog {
  id        String   @id @default(uuid())
  action    AdminAction
  actorId   String?
  actor     User?    @relation("UserToAdminAuditLog", fields: [actorId], references: [id])
  target    String?
  meta      Json?
  createdAt DateTime @default(now())

  @@index([actorId])
  @@index([action])
  @@index([createdAt])
}

model AuthLog {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  event           AuthEvent
  ip              String?
  userAgent       String?
  platform        String?
  browser         String?
  locationCity    String?
  locationCountry String?
  createdAt       DateTime @default(now())

  @@index([userId])
  @@index([event])
  @@index([createdAt])
}

model BillingEvent {
  id             String               @id @default(uuid())
  userId         String
  user           User                 @relation(fields: [userId], references: [id])

  subscriptionId String
  subscription   Subscription         @relation(fields: [subscriptionId], references: [id])

  eventType      BillingEventType
  provider       SubscriptionProvider
  status         String?              // Optional result (e.g., "success", "failed", etc.)
  metadata       Json?                // Flexible provider-specific payload

  createdAt      DateTime             @default(now())

  @@index([userId])
  @@index([subscriptionId])
  @@index([eventType])
  @@index([createdAt])
}

model EmailToken {
  id        String    @id @default(uuid())
  email     String
  token     String    @unique
  type      TokenType
  expiresAt DateTime
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())

  @@index([email])
  @@index([type])
  @@index([expiresAt])
}



model MFA {
  id          String            @id @default(uuid())
  userId      String            @unique
  user        User              @relation(fields: [userId], references: [id])
  secret      String
  enabled     Boolean           @default(false)
  verifiedAt  DateTime?
  createdAt   DateTime          @default(now())
  backupCodes MFA_BackupCode[]

  @@index([enabled])
}

model MFA_BackupCode {
  id     String   @id @default(uuid())
  code   String
  usedAt DateTime?
  mfaId  String
  mfa    MFA      @relation(fields: [mfaId], references: [id])

  @@index([mfaId])
  @@index([usedAt])
}

model OAuthAccount {
  id             String    @id @default(uuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  provider       OAuthProvider
  providerUserId String
  accessToken    String?
  refreshToken   String?
  expiresAt      DateTime?
  createdAt      DateTime  @default(now())

  @@unique([provider, providerUserId])
  @@index([userId])
  @@index([provider])
}

model OrganizationDomain {
  id             String        @id @default(uuid())
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  domain         String        @unique
  verified       Boolean       @default(false)
}

model OrganizationInvite {
  id             String    @id @default(uuid())
  email          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  role           OrganizationRole @default(MEMBER)
  invitedById    String?
  invitedBy      User?       @relation("InviteInvitedBy", fields: [invitedById], references: [id])

  token          String     @unique
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime   @default(now())

  @@index([organizationId])
  @@index([email])
}

model OrganizationMembership {
  id             String        @id @default(uuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id])

  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id])

  role           OrganizationRole @default(MEMBER)
  invitedById    String?
  invitedBy      User?         @relation("MembershipInvitedBy", fields: [invitedById], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([userId, organizationId])
}

model OrganizationSSOProvider {
  id               String     @id @default(uuid())
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id])
  provider         String
  ssoConfig        Json
  createdAt        DateTime   @default(now())

  @@index([organizationId])
}

model Organization {
  id          String        @id @default(uuid())
  name        String
  slug        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  memberships OrganizationMembership[]
  domains     OrganizationDomain[]
  invites     OrganizationInvite[]
  ssoProviders OrganizationSSOProvider[]
}

model Session {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  ip              String?
  userAgent       String?
  deviceName      String?
  platform        String?
  browser         String?
  locationCity    String?
  locationCountry String?
  fingerprint     String?
  createdAt       DateTime  @default(now())
  lastActiveAt    DateTime? 
  expiresAt       DateTime
  valid           Boolean   @default(true)
  refreshToken    String? 

  firstSeenAt     DateTime? 
  lastUsedAt      DateTime? 

  @@index([userId])
  @@index([refreshToken])
  @@index([expiresAt])
  @@index([valid])
}

model Subscription {
  id                  String               @id @default(uuid())
  userId              String               @unique
  user                User                 @relation(fields: [userId], references: [id])

  plan                SubscriptionPlan
  status              SubscriptionStatus
  provider            SubscriptionProvider

  stripeCustomerId    String?
  stripeSubId         String?

  paystackCustomerId  String?
  paystackSubCode     String?

  lemonCustomerId     String?
  lemonOrderId        String?

  currentPeriodEnd    DateTime

  billingEvents BillingEvent[]

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@index([plan])
  @@index([status])
  @@index([provider])
  @@index([currentPeriodEnd])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?
  name          String?
  emailVerified DateTime?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  isDeactivated Boolean   @default(false)
  deletedAt     DateTime? 
  status        UserStatus @default(active)

  // Relations
  authLogs     AuthLog[]
  sessions     Session[]
  mfa          MFA?
  activityLogs ActivityLog[]
  accounts     OAuthAccount[]
  tokens       EmailToken[]
  subscription Subscription?
  auditLogs    AdminAuditLog[] @relation("UserToAdminAuditLog")

  organizationInvitesSent OrganizationInvite[] @relation("InviteInvitedBy")
  organizationMemberships OrganizationMembership[]
  organizationMembershipsInvited OrganizationMembership[] @relation("MembershipInvitedBy")

  billingEvents BillingEvent[]

  @@index([status])
  @@index([createdAt])
}'
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\activity-type.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\admin-action.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\auth-event.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\billing-event-type.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\billing-provider.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\oauth-provider.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\social-oauth-provider.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\web3oauth-provider.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\organization-role.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\role.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\subscription-plan.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\subscription-provider.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\subscription-status.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\token-type.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\user-status.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\role.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\user-status.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\admin-action.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\token-type.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\activity-type.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\auth-event.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\subscription-plan.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\subscription-status.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\subscription-provider.enum.ts
2025-06-13 12:20:40 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\oauth-provider.enum.ts
2025-06-13 12:20:40 [INFO]: ‚úÖ Enums index generated with 15 exports ‚Üí auth-kit-core\src\common\constants\prisma-enums\index.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\activity-type.enum.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\admin-action.enum.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\auth-event.enum.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\billing-event-type.enum.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\billing-provider.enum.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\oauth-provider.enum.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\social-oauth-provider.enum.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\web3oauth-provider.enum.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\organization-role.enum.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\role.enum.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\subscription-plan.enum.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\subscription-provider.enum.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\subscription-status.enum.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\token-type.enum.ts
2025-06-13 12:20:58 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\user-status.enum.ts
2025-06-13 12:20:59 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\role.enum.ts
2025-06-13 12:20:59 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\user-status.enum.ts
2025-06-13 12:20:59 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\admin-action.enum.ts
2025-06-13 12:20:59 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\token-type.enum.ts
2025-06-13 12:20:59 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\activity-type.enum.ts
2025-06-13 12:20:59 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\auth-event.enum.ts
2025-06-13 12:20:59 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\subscription-plan.enum.ts
2025-06-13 12:20:59 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\subscription-status.enum.ts
2025-06-13 12:20:59 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\subscription-provider.enum.ts
2025-06-13 12:20:59 [INFO]: Wrote auth-kit-core\src\common\constants\prisma-enums\oauth-provider.enum.ts
2025-06-13 12:20:59 [INFO]: ‚úÖ Enums index generated with 15 exports ‚Üí auth-kit-core\src\common\constants\prisma-enums\index.ts
2025-06-13 12:22:37 [INFO]: ‚úÖ Utils index generated with 15 exports ‚Üí auth-kit-core\src\common\utils\index.ts
2025-06-13 12:25:54 [INFO]: üëÄ Watching for changes in C:\Users\USER\Desktop\Projects\Voltix\backend\prisma\schema.prisma...
2025-06-13 12:47:38 [INFO]: ‚úÖ Wrote auth-kit-core\src\common\constants\prisma-enums\activity-type.enum.ts
2025-06-13 12:50:16 [INFO]: ‚úÖ Wrote auth-kit-core\src\common\constants\prisma-enums\activity-type.enum.ts
