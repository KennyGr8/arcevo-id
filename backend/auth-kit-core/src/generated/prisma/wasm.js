
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  ip: 'ip',
  metadata: 'metadata',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.AdminAuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  actorId: 'actorId',
  target: 'target',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.AuthLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  event: 'event',
  ip: 'ip',
  userAgent: 'userAgent',
  platform: 'platform',
  browser: 'browser',
  locationCity: 'locationCity',
  locationCountry: 'locationCountry',
  createdAt: 'createdAt'
};

exports.Prisma.BillingEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subscriptionId: 'subscriptionId',
  eventType: 'eventType',
  provider: 'provider',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.EmailTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  type: 'type',
  expiresAt: 'expiresAt',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.MFAScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  secret: 'secret',
  enabled: 'enabled',
  verifiedAt: 'verifiedAt',
  createdAt: 'createdAt'
};

exports.Prisma.MFA_BackupCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  usedAt: 'usedAt',
  mfaId: 'mfaId'
};

exports.Prisma.OAuthAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerUserId: 'providerUserId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.OrganizationDomainScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  domain: 'domain',
  verified: 'verified'
};

exports.Prisma.OrganizationInviteScalarFieldEnum = {
  id: 'id',
  email: 'email',
  organizationId: 'organizationId',
  role: 'role',
  invitedById: 'invitedById',
  token: 'token',
  expiresAt: 'expiresAt',
  acceptedAt: 'acceptedAt',
  createdAt: 'createdAt'
};

exports.Prisma.OrganizationMembershipScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  organizationId: 'organizationId',
  role: 'role',
  invitedById: 'invitedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrganizationSSOProviderScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  provider: 'provider',
  ssoConfig: 'ssoConfig',
  createdAt: 'createdAt'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  ip: 'ip',
  userAgent: 'userAgent',
  deviceName: 'deviceName',
  platform: 'platform',
  browser: 'browser',
  locationCity: 'locationCity',
  locationCountry: 'locationCountry',
  fingerprint: 'fingerprint',
  createdAt: 'createdAt',
  lastActiveAt: 'lastActiveAt',
  expiresAt: 'expiresAt',
  valid: 'valid',
  refreshToken: 'refreshToken',
  firstSeenAt: 'firstSeenAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  plan: 'plan',
  status: 'status',
  provider: 'provider',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubId: 'stripeSubId',
  paystackCustomerId: 'paystackCustomerId',
  paystackSubCode: 'paystackSubCode',
  lemonCustomerId: 'lemonCustomerId',
  lemonOrderId: 'lemonOrderId',
  currentPeriodEnd: 'currentPeriodEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  emailVerified: 'emailVerified',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeactivated: 'isDeactivated',
  deletedAt: 'deletedAt',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ActivityType = exports.$Enums.ActivityType = {
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  MFA_ENABLED: 'MFA_ENABLED',
  PASSWORD_RESET: 'PASSWORD_RESET'
};

exports.AdminAction = exports.$Enums.AdminAction = {
  USER_BAN: 'USER_BAN',
  USER_UNBAN: 'USER_UNBAN',
  ACCOUNT_DELETED: 'ACCOUNT_DELETED',
  ORG_CREATED: 'ORG_CREATED',
  ORG_MEMBER_REMOVED: 'ORG_MEMBER_REMOVED',
  ORG_INVITE_SENT: 'ORG_INVITE_SENT',
  SUBSCRIPTION_UPDATED: 'SUBSCRIPTION_UPDATED'
};

exports.AuthEvent = exports.$Enums.AuthEvent = {
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  MFA_SUCCESS: 'MFA_SUCCESS',
  MFA_FAILED: 'MFA_FAILED',
  EMAIL_VERIFIED: 'EMAIL_VERIFIED',
  PASSWORD_CHANGED: 'PASSWORD_CHANGED',
  TOKEN_EXPIRED: 'TOKEN_EXPIRED'
};

exports.BillingEventType = exports.$Enums.BillingEventType = {
  SUBSCRIPTION_CREATED: 'SUBSCRIPTION_CREATED',
  SUBSCRIPTION_UPDATED: 'SUBSCRIPTION_UPDATED',
  SUBSCRIPTION_CANCELED: 'SUBSCRIPTION_CANCELED',
  PAYMENT_SUCCEEDED: 'PAYMENT_SUCCEEDED',
  PAYMENT_FAILED: 'PAYMENT_FAILED',
  TRIAL_STARTED: 'TRIAL_STARTED',
  TRIAL_ENDED: 'TRIAL_ENDED',
  REFUND_INITIATED: 'REFUND_INITIATED',
  COUPON_APPLIED: 'COUPON_APPLIED',
  PLAN_SWITCHED: 'PLAN_SWITCHED',
  RENEWAL: 'RENEWAL',
  PROVIDER_SYNC: 'PROVIDER_SYNC'
};

exports.SubscriptionProvider = exports.$Enums.SubscriptionProvider = {
  STRIPE: 'STRIPE',
  PAYSTACK: 'PAYSTACK',
  LEMONSQUEEZY: 'LEMONSQUEEZY'
};

exports.TokenType = exports.$Enums.TokenType = {
  VERIFY_EMAIL: 'VERIFY_EMAIL',
  RESET_PASSWORD: 'RESET_PASSWORD',
  MAGIC_LINK: 'MAGIC_LINK',
  TOTP: 'TOTP'
};

exports.OAuthProvider = exports.$Enums.OAuthProvider = {
  GITHUB: 'GITHUB',
  GOOGLE: 'GOOGLE',
  DISCORD: 'DISCORD'
};

exports.OrganizationRole = exports.$Enums.OrganizationRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  GUEST: 'GUEST'
};

exports.SubscriptionPlan = exports.$Enums.SubscriptionPlan = {
  FREE: 'FREE',
  PREMIUM: 'PREMIUM',
  PRO: 'PRO',
  ENTERPRISE: 'ENTERPRISE',
  EDUCATOR: 'EDUCATOR'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  CANCELED: 'CANCELED',
  TRIALING: 'TRIALING',
  EXPIRED: 'EXPIRED',
  RENEWED: 'RENEWED'
};

exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  PREMIUM: 'PREMIUM',
  PRO: 'PRO',
  ADMIN: 'ADMIN'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  active: 'active',
  suspended: 'suspended',
  banned: 'banned'
};

exports.Prisma.ModelName = {
  ActivityLog: 'ActivityLog',
  AdminAuditLog: 'AdminAuditLog',
  AuthLog: 'AuthLog',
  BillingEvent: 'BillingEvent',
  EmailToken: 'EmailToken',
  MFA: 'MFA',
  MFA_BackupCode: 'MFA_BackupCode',
  OAuthAccount: 'OAuthAccount',
  OrganizationDomain: 'OrganizationDomain',
  OrganizationInvite: 'OrganizationInvite',
  OrganizationMembership: 'OrganizationMembership',
  OrganizationSSOProvider: 'OrganizationSSOProvider',
  Organization: 'Organization',
  Session: 'Session',
  Subscription: 'Subscription',
  User: 'User'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
